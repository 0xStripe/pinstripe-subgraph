# Market contains index token, long token, short token addresses
type Market @entity {
  id: ID!
  # Market token address, it's also used as Market address
  marketToken: String!
  # Index token address
  indexToken: String!
  # Long token address
  longToken: String!
  # Short token address
  shortToken: String!
  # Created at blockNumber
  blockNumber: Int!
  # Created at timestamp
  timestamp: Int!
}

# Represent a transaction
type Transaction @entity {
  id: ID!
  transactionHash: String!
  transactionIndex: Int!
  logIndex: Int!
  blockNumber: Int!
  timestamp: Int!
  from: String!
  to: String!
}

enum OrderStatus {
  Created
  Executed
  Cancelled
  Frozen
}

type Deposit @entity {
  # Use create deposit request key as ID 
  id: ID!

  from: String!
  receiver: String!
  callbackContract: String!
  market: String!
  initialLongToken: String!
  initialShortToken: String!
  longTokenSwapPath: [String!]!
  shortTokenSwapPath: [String!]!
  initialLongTokenAmount: BigInt!
  initialShortTokenAmount: BigInt!
  minMarketTokens: BigInt!
  updatedAtBlock: BigInt!
  executionFee: BigInt!
  callbackGasLimit: BigInt!
  shouldUnwrapNativeToken: Boolean!

  status: OrderStatus!

  # execution params
  executedLongTokenAmount: BigInt
  executedShortTokenAmount: BigInt
  receivedMarketTokens: BigInt

  # cancellation params
  cancelledReason: String
  cancelledReasonBytes: Bytes

  createdTxn: Transaction!
  executedTxn: Transaction
  cancelledTxn: Transaction
}

type Withdrawal @entity {
  # request key
  id: ID!

  from: String!
  receiver: String!
  callbackContract: String!
  market: String!
  marketTokenAmount: BigInt!
  minLongTokenAmount: BigInt!
  minShortTokenAmount: BigInt!
  updatedAtBlock: BigInt!
  executionFee: BigInt!
  callbackGsaLimit: BigInt!
  shouldUnwrapNativeToken: Boolean!

  status: OrderStatus!

  # cancellation params
  cancelledReason: String
  cancelledReasonBytes: Bytes

  createdTxn: Transaction!
  executedTxn: Transaction
  cancelledTxn: Transaction
}
